{"version":3,"file":"bundle.js","sources":["codeword.js","geometry.js","polygon.js","menu.js","input.js","button.js","tree.js","index.js"],"sourcesContent":["/**\n * @param {number} n  N-polygon sides\n * @return {number[][]} All valid codewords for an N-polygon\n */\nexport function getCodeWords(n) {\n  const UP = 0;\n  const DOWN = 1;\n\n  let codeword = new Array(n).fill(-1);\n  let direction = new Array(n).fill(-1);\n  let pushPoint = new Array(n).fill(-1);\n  let maxValue = new Array(n).fill(-1);\n  let codeWordList = [];\n\n  function initialize() {\n    codeword[0] = n - 1;\n    for (let j = 1; j < n; j++) {\n      codeword[j] = 0;\n      pushPoint[j] = 0;\n    }\n    codeWordList.push([...codeword]);\n  }\n\n  function generate_all_trees(position) {\n    if (position === 0) {\n      return;\n    }\n\n    if (position === n - 1) {\n      maxValue[position] = 1;\n    } else if (position !== 0) {\n      maxValue[position] =\n        maxValue[position + 1] +\n        1 -\n        codeword[position + 1];\n    }\n\n    if (codeword[position] == 0) {\n      direction[position] = UP;\n    } else {\n      direction[position] = DOWN;\n    }\n\n    generate_all_trees(position - 1);\n\n    for (let i = 0; i < maxValue[position]; i++) {\n      if (direction[position] == UP) {\n        pull(position, pushPoint[position]);\n      } else {\n        push(position, pushPoint[position]);\n      }\n      generate_all_trees(position - 1);\n    }\n\n    if (position !== n - 1) {\n      if (direction[position] == UP) {\n        pushPoint[position + 1] = position;\n      } else {\n        pushPoint[position + 1] =\n          pushPoint[position];\n      }\n    }\n  }\n\n  function push(i, j) {\n    codeword[i] = codeword[i] - 1;\n    codeword[j] = codeword[j] + 1;\n    codeWordList.push([...codeword]);\n  }\n\n  function pull(i, j) {\n    codeword[i] = codeword[i] + 1;\n    codeword[j] = codeword[j] - 1;\n    codeWordList.push([...codeword]);\n  }\n\n  initialize();\n  generate_all_trees(n - 1);\n\n  return codeWordList;\n}\n// Implementation of Lemma 1: (Valid Codewords) [Zerling]\n// NOTE THAT THIS COULD BE MORE EFFICIENT...\n// Note that codeword should equal to n-gon sides - 2 (n)\n// Example: cw = [3, 0, 0, 0], n = 4\n// This is valid!\nexport function isValidCodeword(cw, n) {\n  let isValid = true;\n  let nums = cw.map((v) => +v);\n  for (let i = 1; i < n - 1; i++) {\n    let sum = 0;\n    for (let j = i + 1; j < n; j++) {\n      sum += nums[j];\n    }\n    let wi = nums[i];\n    if (wi > n - i - sum) {\n      isValid = false;\n    }\n  }\n\n  let s = 0;\n  for (let j = 1; j < n; j++) {\n    s += nums[j];\n  }\n\n  let w0 = nums[0];\n  if (w0 != n - 1 - s) {\n    isValid = false;\n  }\n\n  return isValid;\n}\n\nconsole.log(getCodeWords(4))\n\n\n\nfunction isValidRotation(cw1, cw2) {\n\n\n  return \n}\n\n// let codewords = getCodeWords(4)\n// console.log(JSON.stringify(codewords))\n\n\nfunction gather_stacks(codewords) {\n  console.log(getCodeWords(4))\n  let stacks = []\n  // let d = 0\n  \n  let height = 1\n  // console.log(cw)\n  for (let d = 0; d < 2; d++) {\n    for (let h = 1; h < 2; h++) {\n\n    }\n  }\n\n\n\n  return \n}\n\nlet codewords = getCodeWords(5)\nconsole.log(JSON.stringify(codewords))\n// gather_stacks(JSON.stringify(codewords))\n","import { range } from 'd3'\n\nconst createEdge = (p1, p2, start, end, depth = -1) => {\n  let x = (p1.x + p2.x) / 2;\n  let y = (p1.y + p2.y) / 2;\n  let x_diff = p1.x - p2.x;\n  let y_diff = p1.y - p2.y;\n  let dist = Math.hypot(x_diff, y_diff);\n  return {\n    p1,\n    p2,\n    midpoint: { x, y },\n    dist,\n    start_idx: start,\n    end_idx: end,\n    getKey: () => `${start},${end}`,\n    depth,\n  };\n};\n\nexport const createPolygonPoints = (N, r, leftOffset, topOffset) => {\n  let points = [];\n  let inc = (2 * Math.PI) / N;\n  for (let i = 0; i < N; i++) {\n    let theta = inc * (i + 1) + (Math.PI * 3) / 2 - inc / 2;\n\n    let r_x = r + leftOffset;\n    let r_y = r + topOffset;\n\n    let x = r * Math.cos(theta) + r_x;\n    let y = r * Math.sin(theta) + r_y;\n\n    let vec_x = x - r_x;\n    let vec_y = y - r_y;\n    let mag = Math.sqrt(vec_x * vec_x + vec_y * vec_y);\n    let ux = vec_x / mag;\n    let uy = vec_y / mag;\n\n    let point = { x, y, ux, uy };\n    points.push(point);\n  }\n  points.reverse();\n  return points;\n};\n\nexport const createPolygonEdges = (points) => {\n  let edges = [];\n  const N = points.length;\n  for (let i = 0; i < N; i++) {\n    let curr_point = points[i];\n\n    let next_point_idx = (i + 1) % N;\n    let next_point = points[next_point_idx];\n    let edge = createEdge(curr_point, next_point, i, next_point_idx);\n    edges.push(edge);\n  }\n  return edges;\n};\n\nexport const createTriangles = (codeword, polygonEdges, interiorEdges) => {\n  if (!interiorEdges.length) return { solution: [], maxDepth: 1 };\n\n  let interiorMap = {};\n\n  let N = polygonEdges.length;\n  let interiorN = interiorEdges.length;\n\n  let rootKey = `${N - 1},0`\n\n  for (let i = 0; i < interiorN; i++) {\n    let edge = interiorEdges[i];\n    let key = edge.getKey()\n    interiorMap[key] = edge;\n  }\n  interiorMap[rootKey] = polygonEdges[N - 1];\n\n  const formatKey = (start, end) => {\n    return `${start},${end}`\n  }\n  const getWrapIndex = (idx) => idx % N;\n  const fillCrossings = (crossings, start, end) => {\n    for (let i = start + 1; i < end; i++) {\n      crossings[getWrapIndex(i)] = true;\n    }\n  };\n\n  let nodes = {};\n  let triangles = [];\n\n  let crossings = new Array(N).fill(false);\n  let polyEdgesUsed = new Array(N).fill(false);\n  let used = new Set(range(N));\n\n  let edgeStack = [];\n  let startIndex = codeword.length - 1;\n  for (let i = startIndex; i >= 0; i--) {\n    let point = i;\n    let code = codeword[i];\n\n    let edgePoint = point + 2;\n    while (code > 0) {\n      let ind = getWrapIndex(edgePoint);\n      // If there are no crossing at the index, then it's a valid edge\n      if (!crossings[ind]) {\n        let tri = [];\n        tri.push([point, ind]);\n        code--;\n        fillCrossings(crossings, point, edgePoint);\n\n        let node = {}\n        node.left = null;\n        node.right = null;\n        node.parent = null;\n        node.depth = 0;\n        let key = formatKey(point, ind)\n        node.value = key;\n        nodes[key] = node;\n\n        let checkRange = range(point, edgePoint).map((e) => getWrapIndex(e));\n        for (let j = 0; j < checkRange.length; j++) {\n          let edge = checkRange[j];\n          if (!polyEdgesUsed[edge]) {\n            polyEdgesUsed[edge] = true;\n            tri.push([edge, getWrapIndex(edge + 1)]);\n            used.delete(edge);\n          }\n        }\n\n        while (tri.length < 3) {\n          let e = edgeStack.pop();\n          let childKey = formatKey(e[0], e[1])\n          let parentKey = formatKey(point, ind)\n          nodes[childKey].parent = parentKey;\n          \n          if (point == e[0]) {\n            nodes[parentKey].left = childKey\n          } else {\n            nodes[parentKey].right = childKey;\n          }\n          tri.push(e);\n        }\n\n        triangles.push(tri);\n\n        edgeStack.push([point, ind]);\n      }\n      edgePoint++;\n    }\n  }\n\n  let rootNode = {}\n  rootNode.left = null;\n  rootNode.right = null;\n  rootNode.parent = null;\n  rootNode.value = rootKey;\n  rootNode.depth = 0;\n  nodes[rootKey] = rootNode;\n\n  let lastTriangle = [];\n  while (edgeStack.length) {\n    let e = edgeStack.pop();\n    let childKey = formatKey(e[0], e[1])\n    let parentKey = rootKey\n\n    nodes[childKey].parent = parentKey;\n\n    if (0 == e[0]) {\n      nodes[rootKey].left = childKey;\n    } else {\n      nodes[rootKey].right = childKey;\n    }\n\n    lastTriangle.push(e);\n  }\n\n  used.forEach((value) => {\n    lastTriangle.push([value, getWrapIndex(value + 1)]);\n  });\n\n  triangles.push(lastTriangle);\n\n  let solution = [];\n  let start = rootKey;\n\n  let maxDepth = 1;\n\n  // TODO CHECK THE LEFT AND RIGHT\n  function bfs() {\n    let queue = [start];\n    while (queue.length > 0) {\n      let n = queue.shift();\n      let node = nodes[n];\n      let currEdge = interiorMap[n];\n\n      if (node.left) {\n        let neighborEdge = interiorMap[node.left];\n        let neighborNode = nodes[node.left];\n        neighborNode.depth = node.depth + 1;\n        maxDepth = Math.max(maxDepth, node.depth + 1);\n        let e = createEdge(\n          currEdge.midpoint,\n          neighborEdge.midpoint,\n          -1,\n          -1,\n          node.depth + 1\n        );\n        queue.push(node.left);\n        solution.push(e);\n      }\n\n      if (node.right) {\n        let neighborEdge = interiorMap[node.right];\n        let neighborNode = nodes[node.right];\n        neighborNode.depth = node.depth + 1;\n        maxDepth = Math.max(maxDepth, node.depth + 1);\n        let e = createEdge(\n          currEdge.midpoint,\n          neighborEdge.midpoint,\n          -1,\n          -1,\n          node.depth + 1\n        );\n        queue.push(node.right);\n        solution.push(e);\n      }\n    }\n  }\n\n  bfs(nodes, start, 0, interiorMap);\n  return { solution, maxDepth, nodes };\n};\n\nexport const getCodewordEdges = (points, codeword) => {\n  const N = points.length;\n  const getWrapIndex = (idx) => idx % N;\n  const fillCrossings = (crossings, start, end) => {\n    for (let i = start + 1; i < end; i++) {\n      crossings[getWrapIndex(i)] = true;\n    }\n  };\n  const findCodeEdges = (crossings, point, code) => {\n    // Offset by 2 vertices since edges cannot be next to each other\n    let edgePoint = point + 2;\n    let edges = [];\n    while (code > 0) {\n      let ind = getWrapIndex(edgePoint);\n      // If there are no crossing at the index, then it's a valid edge\n      if (!crossings[ind]) {\n        edges.push(getWrapIndex(ind));\n        code--;\n        fillCrossings(crossings, point, edgePoint);\n      }\n      edgePoint++;\n    }\n    return edges;\n  };\n\n  let all_edges = [];\n  let crossings = new Array(N).fill(false);\n  let startIndex = codeword.length - 1;\n  for (let i = startIndex; i >= 0; i--) {\n    let code = codeword[i];\n    let edges = findCodeEdges(crossings, i, code);\n    for (let j = 0; j < edges.length; j++) {\n      let edge = edges[j];\n      let p1 = points[i];\n      let p2 = points[edge];\n      let e = createEdge(p1, p2, i, edge);\n      all_edges.push(e);\n    }\n  }\n\n  return all_edges;\n};\n","import { transition, line, dispatch } from \"d3\";\n\nimport {\n  createPolygonPoints,\n  createPolygonEdges,\n  getCodewordEdges,\n  createTriangles,\n} from \"./geometry\";\n\n/**\n * The order of the edges in e2 is as closely matched to e1 as much as possible\n * If there are at least 2 edge differences, the original e2 is returned\n * Otherwise, an ordered e2 is return\n * @param {Object[]} e1 The previous interior edges\n * @param {Object[]} e2 The current interior edges\n * @return {Object[]} All valid codewords for an N-polygon\n */\nconst positionEdges = (e1, e2) => {\n\n  if (e1 == null || e1.length == 0) return e2;\n  // console.log(\"CALLED\")\n  // console.log(JSON.stringify(e1.map(d => (\"\" + d.start_idx + d.end_idx))), \"PREVIOUS\")\n\n  // console.log(123456789)\n  // console.log(JSON.stringify(e2.map(d => (\"\" + d.start_idx + d.end_idx))), \"CURRENT\")\n\n  let new_res = new Array(e1.length).fill(-1);\n  let numbers = Array.from(Array(e1.length).keys());\n  let unusedIndex = new Set(numbers);\n\n  let idxDict = {};\n  for (let i = 0; i < e1.length; i++) {\n    let { start_idx, end_idx } = e1[i];\n    let key = \"\" + start_idx + end_idx;\n    idxDict[key] = i;\n  }\n\n  let count = 0;\n  let unused = null;\n  for (let j = 0; j < e2.length; j++) {\n    let { start_idx, end_idx } = e2[j];\n    let key = \"\" + start_idx + end_idx;\n    if (idxDict[key] == undefined) {\n      unused = e2[j];\n      count += 1;\n    } else if (idxDict[key] !== j) {\n      new_res[idxDict[key]] = e2[j];\n      unusedIndex.delete(idxDict[key]);\n    } else {\n      new_res[j] = e2[j];\n      unusedIndex.delete(j);\n    }\n  }\n\n  // console.log(count, \"HEREEEEE\")\n\n  if (count > 1) return e2;\n\n  let keys = unusedIndex.keys();\n  let value = keys.next().value;\n\n  new_res[value] = unused;\n\n  console.log(JSON.stringify(new_res.map(d => (\"\" + d.start_idx + d.end_idx))), \"RESULT\")\n  // console.log(JSON.stringify(new_res), \"CHECK ME\")\n  return new_res;\n};\n\nexport const polygon = () => {\n  let N;\n  let codeword;\n  let color;\n  let pointColor;\n  let radius;\n  let pointSize;\n  let margin;\n  let transDuration;\n  let strokeWidth;\n  let dash;\n  let fontSize;\n\n  let drawDelay;\n\n  let lastEdges;\n\n  let interp;\n  let treeInterp;\n\n  let nodes;\n  let treePath = [];\n\n  const listeners = dispatch(\"animstart\", \"animend\");\n\n  const my = (selection) => {\n    let points = createPolygonPoints(N, radius, margin.left, margin.top);\n    let polygonEdges = createPolygonEdges(points);\n    let interiorEdges = getCodewordEdges(points, codeword);\n\n    // NOTE: This code is very dangerous, refactor later\n    if (lastEdges != null) {\n      interiorEdges = positionEdges(lastEdges, interiorEdges);\n    }\n\n    treePath = []\n\n    let maxDepth = 1;\n    if (interiorEdges) {\n      let treeInfo = createTriangles(codeword, polygonEdges, interiorEdges);\n      treePath = treeInfo.solution;\n      maxDepth = treeInfo.maxDepth;\n      nodes = treeInfo.nodes\n    }\n\n    lastEdges = interiorEdges;\n    const t = transition().duration(transDuration);\n    const pointLine = line()\n      .x((d) => d.x)\n      .y((d) => d.y);\n\n    const positionLines = (lines) => {\n      lines\n        .attr(\"x1\", (d) => d.p1.x)\n        .attr(\"y1\", (d) => d.p1.y)\n        .attr(\"x2\", (d) => d.p2.x)\n        .attr(\"y2\", (d) => d.p2.y);\n    };\n\n    const initializeRadius = (circles) => {\n      circles.attr(\"r\", 0);\n    };\n\n    const growRadius = (enter, color) => {\n      enter.transition(t).attr(\"r\", pointSize).attr(\"fill\", color);\n    };\n\n    const positionCircles = (circles) => {\n      circles.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n    };\n\n    const enterCircles = (circles, color) => {\n      circles\n        .call(positionCircles)\n        .call(initializeRadius)\n        .call(growRadius, color);\n    };\n\n    const positionText = (text) => {\n      text\n        .attr(\"x\", (d) => d.x - 3 + d.ux * 15)\n        .attr(\"y\", (d) => d.y + 6 + d.uy * 15);\n    };\n\n    const calculateDashArr = (edge) => {\n      let dashLength = dash\n        .split(/[\\s,]/)\n        .map((a) => parseFloat(a) || 0)\n        .reduce((a, b) => a + b);\n\n      let dashCount = Math.ceil(edge.dist / dashLength);\n      let newDashes = new Array(dashCount).join(dash + \" \");\n      let dashArray = newDashes + \" 0, \" + edge.dist;\n      return dashArray;\n    };\n\n    const exitLines = (lines) => {\n      lines\n        .attr(\"x1\", (_) => 0)\n        .attr(\"y1\", (_) => 0)\n        .attr(\"x2\", (_) => 0)\n        .attr(\"y2\", (_) => 0)\n    }\n\n    selection\n      .selectAll(\".vertex-label\")\n      .data(points)\n      .join(\n        (enter) => {\n          enter\n            .append(\"text\")\n            .attr(\"class\", \"vertex-label\")\n            .attr(\"font-size\", \"0px\")\n            .call(positionText)\n            .transition(t)\n            .attr(\"font-size\", fontSize)\n            .text((_, i) => i);\n        },\n\n        (update) =>\n          update.call((update) => update.transition(t).call(positionText)),\n        (exit) => exit.transition(t).attr(\"font-size\", \"0px\").remove()\n      )\n      .transition(t)\n      .attr(\"opacity\", \"1.0\")\n      .text((_, i) => i);\n\n    selection\n      .selectAll(\".root\")\n      .data([polygonEdges[N - 1].midpoint])\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"root\")\n            .call(enterCircles, interp(pointColor)),\n\n        (update) =>\n          update.call((update) => update.transition(t).call(positionCircles)),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n\n    selection\n      .selectAll(\".vertex\")\n      .data(points)\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"vertex\")\n            .call(enterCircles, pointColor),\n        (update) =>\n          update.call((update) => update.transition(t).call(positionCircles)),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n\n    selection\n      .selectAll(\".polygon-lines\")\n      .data(polygonEdges)\n      .join(\n        (enter) =>\n          enter\n            .append(\"line\")\n            .attr(\"class\", \"polygon-lines\")\n            .attr(\"stroke-opacity\", \"0.0\")\n            .transition(t)\n            .on(\"start\", () => { listeners.call(\"animstart\", null);  })\n            .on(\"end\", () => {\n              listeners.call(\"animend\", null);\n            })\n            .attr(\"stroke-opacity\", \"1.0\")\n            .call(positionLines),\n        (update) =>\n          update.call((update) => update.transition(t).call(positionLines)),\n        (exit) =>\n          exit\n            .transition(t)\n            .on(\"start\", () => { listeners.call(\"animstart\", null) })\n            .on(\"end\", () => {\n              listeners.call(\"animend\", null);\n            })\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove()\n      )\n      .attr(\"stroke\", color)\n      .attr(\"stroke-width\", strokeWidth);\n\n    selection\n      .selectAll(\".tree-path\")\n      .data(treePath)\n      .join(\n        (enter) => {\n          enter\n            .append(\"path\")\n            .attr(\"class\", \"tree-path\")\n            .attr(\"stroke-width\", strokeWidth)\n            .attr(\"d\", (d) => pointLine([d.p1, d.p2]))\n            .attr(\"stroke\", (d) => treeInterp(1-(d.depth / 11)))\n            .attr(\"opacity\", \"0.0\")\n            .transition()\n            .delay(\n              (d, _) => interiorEdges.length * drawDelay + d.depth * drawDelay\n            )\n            // .on(\"end\", (event) => {\n            //   listeners.call(\"interioredgedraw\", null);\n            // })\n            .attr(\"stroke-dasharray\", (d) => calculateDashArr(d))\n            .attr(\"stroke-dashoffset\", (d) => d.dist)\n            .transition()\n\n            .attr(\"stroke-opacity\", \"1.0\")\n            .duration(1000)\n            .attr(\"opacity\", \"1.0\")\n            .attr(\"stroke-dashoffset\", 0)\n            .end()\n            .then(() => {\n              listeners.call(\"animend\", null);\n              // finishedAnimating = true\n            })\n            // .catch(() => {\n            //   listeners.call(\"animend\", null);\n            // })\n        },\n\n        (update) => {\n          update.call((update) => {\n            update\n              .attr(\"stroke-dasharray\", dash)\n              .attr(\"stroke-dashoffset\", null)\n              .transition(t)\n              .attr(\"stroke\", (d) => treeInterp(1-(d.depth / 11)))\n              .attr(\"d\", (d) => pointLine([d.p1, d.p2]));\n          });\n        },\n\n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove();\n        }\n      );\n\n    selection\n      .selectAll(\".interior\")\n      .data(interiorEdges)\n      .join(\n        (enter) => {\n          enter\n            .append(\"path\")\n            .attr(\"class\", \"interior\")\n            .attr(\"stroke-width\", strokeWidth)\n            .attr(\"d\", (d) => pointLine([d.p1, d.p2]))\n            .attr(\"stroke\", (d) => interp(d.start_idx / interiorEdges.length))\n            .attr(\"opacity\", \"0.0\")\n            .transition()\n            .on(\"start\", () => { listeners.call(\"animstart\", null) })\n            .delay((_, i) => i * drawDelay)\n            // .on(\"end\", (_) => {\n            //   console.log(\"draw edge\")\n              // listeners.call(\"end\", null);\n            // })\n            .attr(\"stroke-dasharray\", (d) => d.dist + \" \" + d.dist)\n            .attr(\"stroke-dashoffset\", (d) => d.dist)\n            .transition()\n            .attr(\"stroke-opacity\", \"1.0\")\n            .duration(1000)\n            .attr(\"opacity\", \"1\")\n            .attr(\"stroke-dashoffset\", 0);\n        },\n\n        (update) => {\n          update.call((update) => {\n            update\n              .attr(\"stroke-dasharray\", null)\n              .attr(\"stroke-dashoffset\", null)\n              .transition(t)\n              .attr(\"stroke\", (d) => interp(d.start_idx / interiorEdges.length))\n              .attr(\"d\", (d) => pointLine([d.p1, d.p2]));\n          });\n        },\n\n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-opacity\", \"0.0\")\n            .call(exitLines)\n            .remove();\n        }\n      );\n\n    selection\n      .selectAll(\".interiorVertex\")\n      .data(\n        interiorEdges.map((e) => ({\n          x: e.midpoint.x,\n          y: e.midpoint.y,\n          start_idx: e.start_idx,\n        }))\n      )\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr(\"class\", \"interiorVertex\")\n            .transition()\n            .delay((_, i) => i * drawDelay)\n            .call(positionCircles)\n            .call(initializeRadius)\n            .transition(t)\n            .attr(\"r\", pointSize)\n            .attr(\"fill\", (d) => interp(d.start_idx / interiorEdges.length)),\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .call(positionCircles)\n              .attr(\"fill\", (d) => interp(d.start_idx / interiorEdges.length))\n          ),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      );\n  };\n\n  my.codeword = function (_) {\n    return arguments.length ? ((codeword = _), my) : codeword;\n  };\n\n  my.color = function (_) {\n    return arguments.length ? ((color = _), my) : color;\n  };\n\n  my.radius = function (_) {\n    return arguments.length ? ((radius = _), my) : radius;\n  };\n\n  my.pointSize = function (_) {\n    return arguments.length ? ((pointSize = _), my) : pointSize;\n  };\n\n  my.pointColor = function (_) {\n    return arguments.length ? ((pointColor = _), my) : pointColor;\n  };\n\n  my.N = function (_) {\n    this.reset();\n    return arguments.length ? ((N = _), my) : N;\n  };\n\n  my.reset = function () {\n    lastEdges = null;\n    codeword = [];\n    return my;\n  };\n\n  my.margin = function (_) {\n    return arguments.length ? ((margin = _), my) : margin;\n  };\n\n  my.strokeWidth = function (_) {\n    return arguments.length ? ((strokeWidth = _), my) : strokeWidth;\n  };\n\n  my.dash = function (_) {\n    return arguments.length ? ((dash = _), my) : dash;\n  };\n\n  my.fontSize = function (_) {\n    return arguments.length ? ((fontSize = _), my) : fontSize;\n  };\n\n  my.interp = function (_) {\n    return arguments.length ? ((interp = _), my) : interp;\n  };\n\n  my.treeInterp = function (_) {\n    return arguments.length ? ((treeInterp = _), my) : treeInterp;\n  };\n\n  my.drawDelay = function (_) {\n    return arguments.length ? ((drawDelay = _), my) : drawDelay;\n  };\n\n  my.transDuration = function (_) {\n    return arguments.length ? ((transDuration = _), my) : transDuration;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  my.nodes = function() {\n    if (nodes) {\n      return nodes\n    } else {\n      return []\n    }\n  }\n\n  my.treePath = function() {\n    return treePath\n  }\n\n\n  return my;\n};\n","// Credits to Curran Kelleher!\n// https://vizhub.com/forum/t/episode-11-charts-with-menus/216\n\nimport { dispatch } from 'd3';\nexport const menu = () => {\n  let id;\n  let labelText;\n  let options;\n  const listeners = dispatch('change');\n  const my = (selection) => {\n    selection\n      .selectAll('label')\n      .data([null])\n      .join('label')\n      .attr('for', id)\n      .text(labelText);\n\n    selection\n      .selectAll('select')\n      .data([null])\n      .join('select')\n      .attr('id', id)\n      .on('change', (event) => {\n        listeners.call('change', null, event.target.value);\n      })\n      .selectAll('option')\n      .data(options)\n      .join('option')\n      .attr('value', (d) => d.value)\n      .text((d) => d.text);\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.labelText = function (_) {\n    return arguments.length\n      ? ((labelText = _), my)\n      : labelText;\n  };\n\n  my.options = function (_) {\n    return arguments.length ? ((options = _), my) : options;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch } from \"d3\";\nexport const input = () => {\n  let id;\n  const listeners = dispatch(\"confirm\");\n\n  const my = (selection) => {\n    selection\n      .selectAll(\"input\")\n      .data([null])\n      .join(\"input\")\n      .attr(\"id\", id)\n      .on(\"keyup\", (e) => {\n        if (e.key == \"Enter\") {\n          listeners.call(\"confirm\", null, e.target.value);\n        }\n      });\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch } from 'd3';\nexport const button = () => {\n  let id;\n  let labelText;\n  const listeners = dispatch('click');\n  \n  const my = (selection) => {\n    selection\n      .selectAll('button')\n      .data([null])\n      .join('button')\n      .attr('id', id)\n      .text(labelText)\n      .on('click', () => {\n        listeners.call('click', null);\n      })\n  };\n\n  my.id = function (_) {\n    return arguments.length ? ((id = _), my) : id;\n  };\n\n  my.labelText = function (_) {\n    return arguments.length\n      ? ((labelText = _), my)\n      : labelText;\n  };\n\n  my.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? my : value;\n  };\n\n  return my;\n};\n","import { dispatch, transition } from 'd3';\nexport const tree = () => {\n  let width;\n  let height;\n  let margin; \n  let nodes; // Dictionary of nodes \n  let transDuration;\n  let treeInterp;\n  let interp;\n  let points;\n  let maxXTransform;\n  let nodeSize;\n  \n  const my = (selection) => {\n    const t = transition().duration(transDuration);\n    const tree = d3.tree().size([width, height]).separation((a, b) => {\n      return (a.parent == b.parent ? 1 : 2) / a.depth;\n    })\n\n    // let color = \n    const initializeRadius = (circles) => {\n      circles.attr(\"r\", 0);\n    };\n\n    const growRadius = (enter, color) => {\n      enter.transition(t).attr(\"r\", nodeSize).attr(\"fill\", color);\n    };\n\n    const positionCircles = (circles) => {\n      circles.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n    };\n\n    const rootKey = `${Object.keys(nodes).length + 1},0`\n\n    let links = []\n    let n = []\n    let treeHeight = 1\n    if (nodes && rootKey in nodes) {\n      const root = d3.hierarchy(nodes[rootKey], (d) => {\n        d.children = []\n        if (d.left) {\n          d.children.push(nodes[d.left]) \n        }\n        if (d.right) {\n          d.children.push(nodes[d.right])\n        }\n        return d.children\n      })\n      root.x0 = width / 2\n      root.y0 = 0\n      const treeData = tree(root)\n      n = treeData.descendants()\n      links = treeData.descendants().slice(1) \n      treeHeight = treeData.height\n\n      let s = {}\n      links[0].parent.x -= 150\n      links[0].parent.y += 20\n\n      for (let i = 0; i < links.length; i++) {\n        let currLink = links[i]\n        s[currLink.value] = currLink.x\n        \n        if (currLink.parent.value in s) {\n          currLink.parent.value = s[currLink.parent.value]\n        }\n\n        if (currLink.parent.data.left == currLink.data.value) {\n          currLink.x = currLink.parent.x - maxXTransform * (1 / currLink.depth)\n        } else {\n          currLink.x = currLink.parent.x + maxXTransform * (1 / currLink.depth)\n        }\n\n        s[currLink.value] = currLink.x\n      }\n    }\n\n    selection\n      .selectAll('line.link')\n      .data(links)\n      .join(\n        (enter) => {\n          enter\n            .append('line')\n            .attr('class', 'link')\n            .attr('data-value', (d) => d.data.value )\n            .attr('stroke-width', 2)\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', 0)\n            .transition(t)\n            .attr('x1', d => d.parent.x)\n            .attr('y1', d => d.parent.y)\n            .attr('x2', d => d.x)\n            .attr('y2', d => d.y)\n            .attr(\"stroke\", (d) => treeInterp(1-(d.depth / 11)))\n        },\n        (update) => {\n          update\n            .transition(t)\n              .attr('x1', d => d.parent.x)\n              .attr('y1', d => d.parent.y)\n              .attr('x2', d => d.x)\n              .attr('y2', d => d.y)\n              .attr(\"stroke\", (d) => treeInterp(1-(d.depth / 11)))\n        }, \n        (exit) => {\n          exit\n            .transition(t)\n            .attr(\"stroke-width\", \"0.0\")\n            // .call(exitLines)\n            .remove();\n            // .attr('stroke-width', 0)\n            // .remove()\n        },\n      )  \n      selection\n      .selectAll(\".real-tree-node\")\n      .data(n)\n      .join(\n        (enter) =>\n          enter\n            .append(\"circle\")\n            .attr('data-value', d => d.data.value)\n            .attr(\"class\", \"real-tree-node\")\n            .attr(\"opacity\", \"0.0\")\n            .attr(\"fill\", (d, i) => interp(i == 0 ? 0 : +d.data.value.split(\",\")[0] / (n.length - 1)))\n            // .delay((_, i) => i * drawDelay)\n            .call(initializeRadius)\n            .transition(t)\n            .call(positionCircles)\n            .attr(\"r\", nodeSize)\n            .attr(\"opacity\", \"1.0\"),\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .call(positionCircles)\n              .attr(\"fill\", (d, i) => interp(i == 0 ? 0 : +d.data.value.split(\",\")[0] / (n.length - 1)))\n          ),\n        (exit) => exit.transition(t).call(initializeRadius).remove()\n      )    \n  };\n\n  my.width = function (_) {\n    return arguments.length ? ((width = _), my) : width;\n  };\n\n  my.height = function (_) {\n    return arguments.length ? ((height = _), my) : height;\n  };\n\n  my.margin = function (_) {\n    return arguments.length ? ((margin = _), my) : margin;\n  };\n\n  my.nodes = function (_) {\n    return arguments.length ? ((nodes = _), my) : nodes;\n  };\n\n  my.transDuration = function (_) {\n    return arguments.length ? ((transDuration = _), my) : transDuration;\n  };\n  \n  my.interp = function (_) {\n    return arguments.length ? ((interp = _), my) : interp;\n  };\n\n  my.treeInterp = function (_) {\n    return arguments.length ? ((treeInterp = _), my) : treeInterp;\n  };\n\n  my.points = function (_) {\n    return arguments.length ? ((points = _), my) : points;\n  };\n\n  my.reset = function () {\n    nodes = {}\n    points = []\n    return my;\n  };\n\n  my.update = function(poly) {\n    nodes = poly.nodes()\n    points = poly.treePath()\n    return my\n  }\n\n  my.maxXTransform = function (_) {\n    return arguments.length ? ((maxXTransform = _), my) : maxXTransform;\n  };\n\n  my.nodeSize = function (_) {\n    return arguments.length ? ((nodeSize = _), my) : nodeSize;\n  };\n\n  return my;\n};\n","import { select } from \"d3\";\nimport { getCodeWords, isValidCodeword } from \"./codeword\";\nimport { polygon } from \"./polygon\";\nimport { menu } from \"./menu\";\nimport { input } from \"./input\";\nimport { button } from \"./button\";\nimport { tree } from \"./tree\";\n\n// https://gist.github.com/mbostock/1125997\n// https://observablehq.com/@mbostock/scrubber\n// https://stackoverflow.com/questions/23048263/pausing-and-resuming-a-transition\n// http://www.ams.org/publicoutreach/feature-column/fcarc-associahedra\n\nconst margin = {\n  top: 20,\n  right: 30,\n  bottom: 7,\n  left: 20,\n};\n\nconst treeMargin = {\n  top: 20,\n  right: 20,\n  bottom: 20,\n  left: 20,\n};\n\nconst treeWidth = 600;\nconst treeHeight = 250;\n\nconst N = 4;\nlet codewords = getCodeWords(N - 2);\n\nconst mapCodewords = (cws) =>\n  cws.map((code) => ({\n    value: code,\n    text: code,\n  }));\n\nconst createCodewordOptions = (cws) => {\n  const noneOption = [\n    {\n      value: \"none\",\n      text: \"None\",\n    },\n  ];\n  const options = noneOption.concat(mapCodewords(cws));\n  return options;\n};\n\nlet codeword = [];\n\nconst width = window.innerWidth - margin.left - margin.right;\nconst height = window.innerHeight - margin.top - margin.bottom;\n\nselect(\"body\").append(\"h1\").text(`Rotational Hamiltonian Trees`);\n\nconst codewordHeader = select(\"body\")\n  .append(\"h3\")\n  .text(`Codeword: ${codeword}`);\n\nconst menuContainer = select(\"body\")\n  .append(\"div\")\n  .attr(\"class\", \"menu-container\");\n\nconst polySvg = select(\"body\")\n  .append(\"svg\")\n  .attr(\"id\", \"polygon\")\n  .attr(\"width\", 250)\n  .attr(\"height\", height - 400);\n\nconst treeSvg = select(\"body\")\n  .append(\"svg\")\n  .attr(\"id\", \"tree\")\n  .attr(\"width\", 300)\n  .attr(\"height\", height - 400);\n\nconst NMenu = menuContainer.append(\"div\");\nconst codewordMenu = menuContainer.append(\"div\");\nconst startAnimationButton = menuContainer.append(\"div\");\nconst restartDrawButton = menuContainer.append(\"div\");\nconst codewordLabel = select(\"div\").append(\"label\").text(\"Enter codeword: \");\nconst inputButton = menuContainer.append(\"div\");\n\nconst treeContainer = select(\"body\").append(\"div\").attr(\"class\", \"tree\");\n\nconst radius = 100;\nconst pointSize = 4;\n\nconst color = \"black\";\nconst pointColor = \"black\";\nconst interp = d3[\"interpolateViridis\"];\nconst treeInterp = d3[\"interpolatePlasma\"];\n\n// interpolateYlOrRd\n\nconst NOptions = d3.range(4, 12).map((n) => ({\n  value: n,\n  text: n,\n}));\n\nlet animationInter = null;\n\nlet index = 0;\nfunction playAnimation(poly, t) {\n  clearInterval(animationInter);\n  index = 0;\n  animationInter = setInterval(() => {\n    if (index >= codewords.length) {\n      index = 0;\n      clearInterval(animationInter);\n    } else {\n      let cw = codewords[index];\n      polySvg.call(poly.codeword(cw));\n      treeSvg.call(t.update(poly));\n      select(\"#codeword-menu\").property(\"selectedIndex\", index + 1);\n      codewordHeader.text(`Codeword: ${cw}`);\n      index += 1;\n    }\n  }, 1000);\n}\n\nconst toggle = (disable) => {\n  select(\"#codeword-menu\").property(\"disabled\", disable);\n  select(\"#n-menu\").property(\"disabled\", disable);\n  select(\"#start-button\").property(\"disabled\", disable);\n};\n\nfunction main() {\n  const cw = menu()\n    .id(\"codeword-menu\")\n    .labelText(\"Codeword:\")\n    .options(createCodewordOptions(codewords))\n    .on(\"change\", (cw) => {\n      let parsedCodeword = [];\n      let newNodes = {};\n      if (cw != \"none\") {\n        parsedCodeword = cw.split(\",\");\n      } else {\n        poly.reset();\n      }\n      clearInterval(animationInter);\n      polySvg.call(poly.codeword(parsedCodeword));\n      codewordHeader.text(`Codeword: ${parsedCodeword}`);\n      codewordLabel.text(\"Enter codeword: \").style(\"color\", \"black\");\n\n      if (cw != \"none\") {\n        treeSvg.call(t.update(poly));\n      } else {\n        treeSvg.call(t.reset());\n      }\n    });\n\n  const nChoiceMenu = menu()\n    .id(\"n-menu\")\n    .labelText(\"N:\")\n    .options(NOptions)\n    .on(\"change\", (n) => {\n      const cws = getCodeWords(n - 2);\n      codewords = cws;\n      const options = createCodewordOptions(cws);\n      select(\"#codeword-menu\").property(\"selectedIndex\", -1);\n      codewordMenu.call(cw.options(options));\n      clearInterval(animationInter);\n      polySvg.call(poly.N(n));\n      codewordHeader.text(`Codeword: ${[]}`);\n      treeSvg.call(t.update(poly));\n      codewordLabel.text(\"Enter codeword: \").style(\"color\", \"black\");\n    });\n\n  const restartButton = button()\n    .labelText(\"Restart\")\n    .id(\"restart-button\")\n    .on(\"click\", (_) => {\n      clearInterval(animationInter);\n      polySvg.call(poly.reset());\n      treeSvg.call(t.reset());\n    });\n\n  const startButton = button()\n    .labelText(\"Start anim\")\n    .id(\"start-button\")\n    .on(\"click\", (_) => {\n      playAnimation(poly, t);\n    });\n\n  const codewordInput = input()\n    .id(\"codeword-input\")\n    .on(\"confirm\", (value) => {\n      value = value.replaceAll(\" \", \"\");\n      const validationRegex = /^(\\d+,)*\\d+$/;\n      if (validationRegex.test(value)) {\n        const codeword = value.split(\",\");\n        const n = poly.N();\n        if (codeword.length == n - 2 && isValidCodeword(codeword, n - 2)) {\n          clearInterval(animationInter);\n          polySvg.call(poly.codeword(codeword));\n          codewordHeader.text(`Codeword: ${codeword}`);\n          treeSvg.call(t.update(poly));\n          codewordLabel.text(\"Enter codeword: \").style(\"color\", \"black\");\n        } else {\n          codewordLabel.text(\"Invalid codeword.\").style(\"color\", \"red\");\n        }\n      } else {\n        codewordLabel.text(\"Invalid input.\").style(\"color\", \"red\");\n      }\n    });\n\n  const poly = polygon()\n    .N(N)\n    .codeword(codeword)\n    .radius(radius)\n    .pointSize(pointSize)\n    .pointColor(pointColor)\n    .strokeWidth(2)\n    .color(color)\n    .margin(margin)\n    .drawDelay(100)\n    .transDuration(1000)\n    .interp(interp)\n    .treeInterp(treeInterp)\n    .dash(\"3, 2\")\n    .fontSize(\"16px\")\n    .on(\"animstart\", (_) => toggle(true))\n    .on(\"animend\", (_) => toggle(false));\n\n  startAnimationButton.call(startButton);\n  restartDrawButton.call(restartButton);\n  inputButton.call(codewordInput);\n  codewordMenu.call(cw);\n  polySvg.call(poly);\n  NMenu.call(nChoiceMenu);\n\n  const t = tree()\n    .width(treeWidth)\n    .height(treeHeight)\n    .nodes({})\n    .margin(treeMargin)\n    .transDuration(1000)\n    .interp(interp)\n    .treeInterp(treeInterp)\n    .maxXTransform(50)\n    .nodeSize(4);\n  treeSvg.call(t);\n}\n\nmain();\n"],"names":["const","let","j","codewords","range","i","key","edge","e","childKey","parentKey","neighborEdge","neighborNode","start_idx","end_idx","dispatch","transition","line","select"],"mappings":"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"}